1.itertools迭代器的使用
Python内置了一个模块itertools，包含了很多函数用于creating iterators for efficient looping（创建更有效率的循环
迭代器）

2.itertools.accumulate(iterable[, func]) 
返回累计的和，参数可以是任何类型，包括小数或者分数的增加， 如果提供了可选的功能参数，它应该是两个参数的函数，
它将替代加法，简而言之就是： 
如果一个list对象是list=[p0,p1,p2,p3,p4],那么通过itertools.accumulate() 
返回的结果就是[p0,p0+p1,p0+p1+p2,p0+p1+p2+p3,p0+p1+p2+p3+p4]

3.itertools.chain(*iterables) 
使返回元素从第一个直到筋疲力尽的迭代器，然后继续下一个，直到所有的可迭代对象枯竭。用于连续序列作为一个单一序列。
实例： 
import itertools 
partlist1=’ABC’ 
partlist2=’DEF’ 
partlist3=’GHI’ 
print(list(itertools.chain(partlist1,partlist2,partlist3))) 
打印的结果是： 
[‘A’, ‘B’, ‘C’, ‘D’, ‘E’, ‘F’, ‘G’, ‘H’, ‘I’] 
itertools.chain就是把所有的list连接起来

4.itertools.combinations(iterable, r) 
返回r长度的子序列的元素输入迭代器，组合的字典排序顺序发出， 所以如果输入迭代器进行排序，结合会产生元组排序，每个元
素都是基于他们位置的独特元素，并不是按照他们的价值，所以如果输入元素是独一无二的，每个组合中都没有重复的值。
例子： 
import itertools 
partlist1=’1234’ 
print(list(itertools.combinations(partlist1,2))) 
打印的结果是： 
[(‘1’, ‘2’), (‘1’, ‘3’), (‘1’, ‘4’), (‘2’, ‘3’), (‘2’, ‘4’), (‘3’, ‘4’)] 
通过结果可以看出，itertools.combinations(iterable,r)的函数作用是返回各个r长度的元素，而结果元素是有 
原来的list中的元素组合而成，组合的规律是原list中每个元素与其后的元素组合。

5.itertools.repeat(object[, times]) 
无限迭代的函数，将objext重复times次然后停止 
实例： 
import itertools 
partlist1=’1234’ 
print(list(itertools.repeat(partlist1,2))) 
运行结果是： 
[‘1234’, ‘1234’]
